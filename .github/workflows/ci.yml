name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  lint-and-analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PowerShell
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
          azPSVersion: latest

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          Write-Host "PSScriptAnalyzer installed"

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path ./src -Recurse -Settings PSGallery
          $errors = $results | Where-Object { $_.Severity -eq 'Error' }
          $warnings = $results | Where-Object { $_.Severity -eq 'Warning' }
          
          Write-Host "Analysis Results:"
          Write-Host "  Errors: $($errors.Count)"
          Write-Host "  Warnings: $($warnings.Count)"
          
          if ($errors.Count -gt 0) {
            Write-Host "Errors found:" -ForegroundColor Red
            $errors | ForEach-Object {
              Write-Host "  $($_.RuleName): $($_.Message) (Line $($_.Line))" -ForegroundColor Red
            }
            exit 1
          }
          
          if ($warnings.Count -gt 0) {
            Write-Host "Warnings found:" -ForegroundColor Yellow
            $warnings | ForEach-Object {
              Write-Host "  $($_.RuleName): $($_.Message) (Line $($_.Line))" -ForegroundColor Yellow
            }
          }

  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: Linux
          - os: windows-latest  
            platform: Windows
          - os: macos-latest
            platform: macOS
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PowerShell (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          # Install PowerShell on Linux/macOS
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.0/powershell_7.4.0-1.deb_amd64.deb
            sudo dpkg -i powershell_7.4.0-1.deb_amd64.deb
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install --cask powershell
          fi

      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
          Import-Module Pester
          Write-Host "Pester version: $(Get-Module Pester | Select-Object -ExpandProperty Version)"

      - name: Import module
        shell: pwsh
        run: |
          try {
            Import-Module ./src/AcquisitionToolkit.psm1 -Force
            $functions = Get-Command -Module AcquisitionToolkit
            Write-Host "Module imported successfully with $($functions.Count) functions"
          }
          catch {
            Write-Error "Failed to import module: $($_.Exception.Message)"
            exit 1
          }

      - name: Run Pester tests
        shell: pwsh
        run: |
          $config = New-PesterConfiguration
          $config.Run.Path = './tests'
          $config.Run.PassThru = $true
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputPath = './test-results.xml'
          $config.TestResult.OutputFormat = 'NUnitXml'
          $config.CodeCoverage.Enabled = $true
          $config.CodeCoverage.Path = './src/AcquisitionToolkit.psm1'
          $config.CodeCoverage.OutputPath = './coverage.xml'
          $config.CodeCoverage.OutputFormat = 'JaCoCo'
          $config.Output.Verbosity = 'Detailed'
          
          $results = Invoke-Pester -Configuration $config
          
          Write-Host "Test Results for ${{ matrix.platform }}:"
          Write-Host "  Total: $($results.TotalCount)"
          Write-Host "  Passed: $($results.PassedCount)"
          Write-Host "  Failed: $($results.FailedCount)"
          Write-Host "  Skipped: $($results.SkippedCount)"
          
          if ($results.CodeCoverage) {
            Write-Host "  Coverage: $([math]::Round($results.CodeCoverage.CoveragePercent, 2))%"
          }
          
          if ($results.FailedCount -gt 0) {
            Write-Host "Failed tests:" -ForegroundColor Red
            $results.Failed | ForEach-Object {
              Write-Host "  - $($_.ExpandedName)" -ForegroundColor Red
            }
            exit 1
          }

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.platform }}
          path: |
            test-results.xml
            coverage.xml

  build:
    name: Build Package
    runs-on: windows-latest
    needs: [lint-and-analyze, test]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build dependencies
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer, Pester -Force -Scope CurrentUser

      - name: Run build script
        shell: pwsh
        run: |
          ./build.ps1 -Task All -Configuration Release -GenerateReports

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./build-output/

      - name: Create release package
        if: github.event_name == 'release'
        shell: pwsh
        run: |
          $version = '${{ github.event.release.tag_name }}' -replace '^v', ''
          $packagePath = "./build-output/AcquisitionToolkit-v$version.zip"
          
          if (Test-Path $packagePath) {
            Write-Host "Package ready for release: $packagePath"
          } else {
            Write-Error "Package not found: $packagePath"
            exit 1
          }

      - name: Upload release asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build-output/AcquisitionToolkit-v${{ github.event.release.tag_name }}.zip
          asset_name: AcquisitionToolkit-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    runs-on: windows-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        shell: pwsh
        run: |
          # Create test directories
          New-Item -Path "./test-integration" -ItemType Directory -Force
          
          # Import module
          Import-Module ./src/AcquisitionToolkit.psm1 -Force

      - name: Run Phase 5 integration tests
        shell: pwsh
        run: |
          # Run the Phase 5 verification script in test mode
          $env:CI = "true"
          ./test_phase5.ps1

      - name: Cleanup test artifacts
        if: always()
        shell: pwsh
        run: |
          ./test_phase5.ps1 -CleanupOnly

  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation files
        run: |
          echo "Checking documentation completeness..."
          
          required_docs=(
            "README.md"
            "docs/architecture.md"
            "docs/chain-of-custody.md"
            "Phases.md"
          )
          
          missing_docs=()
          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              missing_docs+=("$doc")
            fi
          done
          
          if [ ${#missing_docs[@]} -gt 0 ]; then
            echo "Missing documentation files:"
            printf '%s\n' "${missing_docs[@]}"
            exit 1
          fi
          
          echo "All required documentation files present"

      - name: Validate README links
        run: |
          echo "Checking README.md for broken links..."
          # Basic check for common issues
          if grep -q "TODO\|FIXME\|XXX" README.md; then
            echo "README contains TODO/FIXME markers"
            exit 1
          fi
          echo "README validation passed"

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: [docs-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build documentation site
        run: |
          mkdir -p _site
          cp README.md _site/index.md
          cp -r docs _site/
          
          # Create a simple index.html
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Forensic Triage Toolkit Documentation</title>
              <meta charset="utf-8">
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  h1 { color: #333; }
                  ul { list-style-type: none; }
                  li { margin: 10px 0; }
                  a { text-decoration: none; color: #0066cc; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <h1>Forensic Triage Toolkit Documentation</h1>
              <ul>
                  <li><a href="docs/architecture.html">Architecture Documentation</a></li>
                  <li><a href="docs/chain-of-custody.html">Chain-of-Custody Specification</a></li>
                  <li><a href="Phases.html">Implementation Phases</a></li>
              </ul>
          </body>
          </html>
          EOF

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 